---
import GameCard from '../components/GameCard.astro';
import Layout from '../layouts/Layout.astro';

const categories = ["A plusieurs", "Reflexion", "Solo", "Cartes", "Enfants"];
const selectedCategory = "Reflexion";

// Appel API pour r√©cup√©rer les jeux (avec pagination)
const page = 1; // Vous pouvez ajuster la page ici si vous avez un m√©canisme pour g√©rer cela
const limit = 10; // Nombre de jeux par page
const response = await fetch(`http://localhost:3001/api/games?page=${page}&limit=${limit}`, {
  credentials: 'include',
});
const games = await response.json();
---

<Layout>
    <header class="flex justify-between items-center p-4 shadow bg-white">
      <div class="flex items-center gap-2">
        <img src="/images/LogoRentAGame.png" alt="Logo" class="h-10">
        <h1 class="text-xl font-bold">Liste des jeux</h1>
      </div>
      <nav class="space-x-4">
        <a href="/" class="font-medium">Liste des jeux</a>
        <a href="#" class="text-gray-600 hover:text-black">√Ä propos</a>
        <a href="#" class="text-gray-600 hover:text-black">Contact</a>
        <a href="/login" class="bg-black text-white px-4 py-2 rounded hover:bg-gray-800 hidden" id="login-btn">Connexion</a>
      </nav>
    </header>

    <div class="flex">
      <aside class="w-48 bg-purple-100 p-4 flex flex-col gap-4">
        <button class="bg-pink-200 text-2xl p-2 rounded-full">+</button>
        <nav class="flex flex-col gap-2">
          <a href="#" class="flex items-center gap-2 font-semibold text-purple-700">
            <span class="material-icons">star</span> Liste de jeux
          </a>
          <a href="#" class="flex items-center gap-2 text-gray-600">
            <span class="material-icons">star</span> √Ä propos
          </a>
          <a href="#" class="flex items-center gap-2 text-gray-600">
            <span class="material-icons">star</span> Nous contacter
          </a>
        </nav>
      </aside>

      <main class="flex-1 p-6">
        <!-- Barre de recherche -->
        <div class="mb-4 flex items-center gap-2">
          <input 
            type="text" 
            id="search-input" 
            placeholder="Rechercher un jeu..." 
            class="flex-1 px-4 py-2 border rounded-full focus:outline-none focus:ring-2 focus:ring-purple-400"
          />
          <button 
            id="search-button" 
            class="p-2 bg-purple-600 text-white rounded-full hover:bg-purple-700"
            title="Rechercher"
          >
            üîç
          </button>
        </div>

        <div class="flex gap-2 mb-4">
          {categories.map(cat => (
            <button class={`px-4 py-2 rounded-full border ${cat === selectedCategory ? 'bg-purple-200 text-purple-900 font-semibold' : 'bg-white text-gray-700'}`}>
              {cat}
            </button>
          ))}
        </div>

        <div id="games-list" class="grid grid-cols-5 gap-4">
          {games.map((game: any) => (
            <GameCard 
              key={game.slug}
              title={game.title} 
              image={game.image} 
              slug={game.slug} 
              minplayers={game.minplayers} 
              maxplayers={game.maxplayers} 
              price={game.price} 
            />
          ))}
        </div>

        <button id="load-more" class="mt-4 px-4 py-2 bg-purple-600 text-white rounded hover:bg-purple-700">
          Afficher plus
        </button>
      </main>
    </div>

    <script type="module">
      let currentPage = 1;
      let searchPage = 1;
      const limit = 10;
      let isSearchMode = false;
      let searchResults = [];
    
      const loadMoreButton = document.getElementById('load-more');
      const gamesList = document.getElementById('games-list');
      const searchInput = document.getElementById('search-input');
      const searchButton = document.getElementById('search-button');
    
      // Fonction pour g√©n√©rer HTML d'une carte jeu
      function createGameCardHtml(game) {
        return `
          <a href="/game/${game.slug}" class="game-card-link">
            <article class="game-card">
              <div class="bg-white rounded shadow p-2" id="${game.slug}">
                <img src="${game.image}" alt="${game.title}" class="w-full h-32 object-cover rounded" />
                <h2 class="text-sm font-bold mt-2">${game.title}</h2>
                <p class="text-xs text-gray-500">${game.minplayers} - ${game.maxplayers} joueurs</p>
              </div>
            </article>
          </a>
        `;
      }
    
      // Fonction d'affichage pour un tableau de jeux
      function renderGames(games) {
        games.forEach(game => {
          gamesList.innerHTML += createGameCardHtml(game);
        });
      }
    
      // Chargement des jeux en pagination standard (API)
      async function loadGamesPage(page) {
        const response = await fetch(`http://localhost:3001/api/games?page=${page}&limit=${limit}`, { credentials: 'include' });
        const newGames = await response.json();
        renderGames(newGames);
    
        if (newGames.length < limit) {
          loadMoreButton.disabled = true;
          loadMoreButton.textContent = 'Tous les jeux sont affich√©s';
        }
      }
    
      // Chargement des r√©sultats de recherche pagin√©s localement
      function loadSearchPage(page) {
        const start = (page - 1) * limit;
        const end = page * limit;
        const pageResults = searchResults.slice(start, end);
        renderGames(pageResults);
    
        if (end >= searchResults.length) {
          loadMoreButton.disabled = true;
          loadMoreButton.textContent = 'Tous les jeux sont affich√©s';
        }
      }
    
      // Gestion du bouton "Afficher plus"
      loadMoreButton.addEventListener('click', async () => {
        if (isSearchMode) {
          searchPage++;
          loadSearchPage(searchPage);
        } else {
          currentPage++;
          await loadGamesPage(currentPage);
        }
      });
    
      // Recherche des jeux
      async function searchGames(query) {
        const res = await fetch(`http://localhost:3001/api/allgames`, {
          credentials: 'include',
        });
        const allGames = await res.json();
    
        searchResults = allGames.filter(game =>
          game.title.toLowerCase().includes(query.toLowerCase())
        );
    
        // Reset l'affichage
        gamesList.innerHTML = '';
        isSearchMode = true;
        searchPage = 1;
    
        if (searchResults.length === 0) {
          gamesList.innerHTML = `<p class="text-gray-500">Aucun jeu trouv√©.</p>`;
          loadMoreButton.style.display = 'none';
        } else {
          loadMoreButton.style.display = 'block';
          loadMoreButton.disabled = false;
          loadMoreButton.textContent = 'Afficher plus';
          loadSearchPage(searchPage);
        }
      }
    
      // Gestion clic sur loupe
      searchButton.addEventListener('click', () => {
        const query = searchInput.value.trim();
        if (query !== '') {
          searchGames(query);
        } else {
            location.reload(); // Recharge la page si le champ est vide
        }
      });
    
      // Gestion touche Entr√©e
      searchInput.addEventListener('keydown', (e) => {
        if (e.key === 'Enter') {
          const query = searchInput.value.trim();
          if (query !== '') {
            searchGames(query);
          } else {
            location.reload(); // Recharge la page si le champ est vide
          }
        }
      });
      // Si il n'y a plus de jeux √† afficher, d√©sactiver le bouton
      if (newGames.length < 5) {
          loadMoreButton.disabled = true;
          loadMoreButton.textContent = 'Tous les jeux sont affich√©s';
        }
      // Chargement initial
      loadGamesPage(currentPage);
    </script>
</Layout>
