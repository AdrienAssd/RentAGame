---
import GameCard from '../components/GameCard.astro';
import Layout from '../layouts/Layout.astro';

// R√©cup√©ration des cat√©gories depuis l'API
const categoriesResponse = await fetch(`https://rentagame-production-81ca.up.railway.app/api/categories`);
const categories = await categoriesResponse.json();

// Appel API pour r√©cup√©rer les jeux (avec pagination)
const page = 1;
const limit = 10;
const response = await fetch(`https://rentagame-production-81ca.up.railway.app/api/games?page=${page}&limit=${limit}`, {
  credentials: 'include',
});
const games = await response.json();

---
<Layout>
  <header class="flex justify-between items-center p-4 shadow bg-white">
    <div class="flex items-center gap-2">
      <img src="/images/LogoRentAGame.png" alt="Logo" class="h-10">
      <h1 class="text-xl font-bold">Liste des jeux</h1>
    </div>
    <nav class="space-x-4">
      <a href="/" class="font-medium">Liste des jeux</a>
      <a href="/apropos" class="text-gray-600 hover:text-black">√Ä propos</a>
      <a href="/contact" class="text-gray-600 hover:text-black">Contact</a>
      <a href="/login" class="bg-black text-white px-4 py-2 rounded hover:bg-gray-800 hidden" id="login-btn">Connexion</a>
    </nav>
  </header>
  <div class="flex">
    <main class="flex-1 p-6">
      <!-- Barre de recherche -->
      <div class="mb-4 flex items-center gap-2">
        <input 
          type="text" 
          id="search-input" 
          placeholder="Rechercher un jeu..." 
          class="flex-1 px-4 py-2 border rounded-full focus:outline-none focus:ring-2 focus:ring-purple-400"
        />
        <button 
          id="search-button" 
          class="p-2 bg-purple-600 text-white rounded-full hover:bg-purple-700"
          title="Rechercher"
        >
          üîç
        </button>
      </div>

      <!-- Menu d√©roulant des cat√©gories -->
      <div class="mb-4">
        <select id="category-select" class="px-4 py-2 border rounded">
          <option value="">Toutes les cat√©gories</option>
          {categories.map((cat: any) => (
            <option value={cat}>{cat}</option>
          ))}
        </select>
      </div>

      <div id="games-list" class="grid grid-cols-5 gap-4">
        {games.map((game: any) => (
          <GameCard 
            key={game.slug}
            title={game.title} 
            image={game.image} 
            slug={game.slug} 
            minplayers={game.minplayers} 
            maxplayers={game.maxplayers} 
            minage={game.minage}
            description={game.description}
          />
        ))}
      </div>

      <button id="load-more" class="mt-4 px-4 py-2 bg-purple-600 text-white rounded hover:bg-purple-700">
        Afficher plus
      </button>
    </main>
  </div>

  <script is:inline type="module">
    console.log('‚úÖ Ce message doit appara√Ætre c√¥t√© client');
    window.addEventListener('DOMContentLoaded', () => {
      // R√©f√©rences DOM
      const loadMoreButton  = document.getElementById('load-more');
      const gamesList       = document.getElementById('games-list');
      const searchInput     = document.getElementById('search-input');
      const searchButton    = document.getElementById('search-button');
      const categorySelect  = document.getElementById('category-select');
  
      // Debug : assure-toi qu'on les r√©cup√®re bien
      console.log({ loadMoreButton, searchInput, searchButton, categorySelect });
  
      // √âtat
      let currentPage     = 1;
      let currentCategory = '';
      const limit         = 10;
  
      // G√©n√®re le HTML d‚Äôune carte jeu
      function createGameCardHtml(game) {
        return `
          <a href="/game/${game.slug}" class="game-card-link">
            <article class="game-card">
              <div class="bg-white rounded shadow p-2" id="${game.slug}">
                <img src="${game.image}" alt="${game.title}" class="w-full h-32 object-cover rounded" loading="lazy" />
                <h2 class="text-sm font-bold mt-2">${game.title}</h2>
                <div class="flex justify-between items-center text-xs text-gray-500">
                  <span>${game.minplayers} - ${game.maxplayers} joueurs</span>
                  <span>${game.minage}+</span>
                </div>
              </div>
            </article>
          </a>
        `;
      }
  
      // R√©initialise la liste de jeux uniquement lors de la recherche ou de l'application d'un filtre
      function resetGameList() {
        gamesList.innerHTML = ''; // R√©initialise la liste de jeux
      }
  
      // Ajoute un tableau de jeux au DOM (ne nettoie pas la liste)
      function renderGames(games) {
        gamesList.innerHTML += games.map(createGameCardHtml).join(''); // Ajoute les jeux sans supprimer les pr√©c√©dents
      }
  
      // Charge une page de jeux, en appliquant le filtre cat√©gorie si pr√©sent
      async function loadGamesPage(page) {
        const catQuery = currentCategory
          ? `&category=${encodeURIComponent(currentCategory)}`
          : '';
        console.log(`Chargement page ${page}, cat√©gorie = "${currentCategory}"`);
        const res = await fetch(
          `https://rentagame-production-81ca.up.railway.app/api/games?page=${page}&limit=${limit}${catQuery}`,
          { credentials: 'include' }
        );
        const newGames = await res.json();
        console.log('Jeux re√ßus :', newGames);
        renderGames(newGames); // Ajoute les jeux sans r√©initialiser la liste
        if (newGames.length < limit) {
          loadMoreButton.disabled = true;
          loadMoreButton.textContent = 'Tous les jeux sont affich√©s';
        }
      }
  
      // Afficher la page suivante au clic
      loadMoreButton.addEventListener('click', async () => {
        currentPage++;
        await loadGamesPage(currentPage);
      });
  
      // Recherche textuelle
      async function searchGames(query) {
        // R√©initialise filtre et liste
        currentCategory = '';
        resetGameList();  // R√©initialise la liste de jeux avant la recherche
        currentPage = 1;
        // Recharge la page 1 de /api/games
        await loadGamesPage(1);
      }
      searchButton.addEventListener('click', () => {
        const q = searchInput.value.trim();
        if (q) searchGames(q);
      });
      searchInput.addEventListener('keydown', (e) => {
        if (e.key === 'Enter') {
          const q = searchInput.value.trim();
          if (q) searchGames(q);
        }
      });
  
      // Filtrage par cat√©gorie
      categorySelect.addEventListener('change', async (e) => {
        const cat = e.target.value;
        // R√©initialise liste et pagination
        resetGameList();  // R√©initialise la liste de jeux avant d'appliquer un filtre
        currentPage = 1;
        loadMoreButton.disabled = false;
        loadMoreButton.textContent = 'Afficher plus';
        // Applique ou retire le filtre
        currentCategory = cat || '';
        await loadGamesPage(1);
      });
  
      // Chargement initial
      loadGamesPage(1);
    });
  </script>
</Layout>
