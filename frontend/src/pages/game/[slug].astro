---
import Layout from '../../layouts/Layout.astro';
import type { AstroGlobal } from 'astro';

const { slug } = Astro.params;
console.log(slug);

// Fetch dynamique des données
let game = null;

if (slug) {
  const res = await fetch(`https://rentagame-production-81ca.up.railway.app/api/game/${slug}`, {
    credentials: 'include',
    headers: {
      'Origin': 'https://rent-a-game-lac.vercel.app', // Ajoute explicitement l'origine
    }
  });  // Utilisez l'API pour récupérer un jeu spécifique
  if (res.ok) {
    game = await res.json();  // Récupérer le jeu directement par son slug
  }
}

if (!game) {
  return {
    status: 404,
    body: 'Jeu non trouvé',
  };
}
let gameCategories = Array.isArray(game.boardgamecategory)
  ? game.boardgamecategory
  : JSON.parse(game.boardgamecategory.replace(/'/g, '"'));

const gameId = game.id; // Assurez-vous que game.id est défini
const responseFeedback = await fetch(`https://rentagame-production-81ca.up.railway.app/api/getfeedback/${gameId}`, {
  credentials: 'include',
  headers: {
    'Origin': 'https://rent-a-game-lac.vercel.app', // Ajoute explicitement l'origine
  }
});
const feedbacks = await responseFeedback.json();
---

<Layout>
  <div id="game-container" class="hidden" data-id={game.id}></div>
  <header class="flex justify-between items-center p-4 shadow bg-white">
    <div class="flex items-center gap-2">
      <img src="/images/LogoRentAGame.webp" alt="Logo" class="h-10" loading="lazy">
      <h1 class="text-xl font-bold">{game.title}</h1>
    </div>
    <nav class="space-x-4">
      <a href="/" class="text-gray-600 hover:text-black">Liste des jeux</a>
      <a href="/apropos" class="text-gray-600 hover:text-black">À propos</a>
      <a href="/contact" class="text-gray-600 hover:text-black">Contact</a>
      <a href="/login" class="bg-black text-white px-4 py-2 rounded hover:bg-gray-800 hidden" id="login-btn">Connexion</a>
    </nav>
  </header>

  <section class="relative bg-white p-4 shadow-md">
    <img src={game.image} alt={`${game.title} Banner`} class="rounded-lg w-full h-64 object-cover" loading="lazy"/>
    <div class="absolute bottom-6 left-6 text-white">
      <h1 class="text-4xl font-bold">{game.title}</h1>
      <div class="mt-4 space-x-2">
        <button class="bg-white text-gray-800 px-4 py-2 rounded font-semibold shadow">Ajouter à ma liste de souhaits</button>
        <button class="bg-white text-gray-800 px-4 py-2 rounded font-semibold shadow">Disponible à l'emprunt</button>
      </div>
    </div>
  </section>

  <section class="categories p-6">
    <h3 class="font-semibold text-lg">Catégories :</h3>
    <ul class="flex flex-wrap gap-2 mt-2">
      {gameCategories.length > 0 ? (
        gameCategories.map((category: any) => (
          <li class="bg-gray-200 text-gray-800 px-4 py-1 rounded-full text-xs">{category}</li>
        ))
      ) : (
        <li class="text-gray-600 text-xs">Aucune catégorie disponible pour ce jeu.</li>
      )}
    </ul>
    <button onclick={`window.location.href='/loan/${game.slug}'`} class="bg-green-500 text-white px-4 py-2 rounded font-semibold shadow hover:bg-green-600">
      Emprunter ce jeu
    </button>

  </section>
  <div class="flex justify-center mt-6">
    <button id="avis-btn" class="bg-purple-100 text-purple-700 px-6 py-2 rounded-l-full font-semibold">Avis</button>
    <button id="description-btn" class="bg-white px-6 py-2 rounded-r-full border">Description</button>
  </div>

  <!-- Conteneurs pour Avis et Description -->
   
  <section id="avis-section" class="p-6 space-y-4">
    <button id="avis-btn" class="bg-purple-100 text-purple-700 px-6 py-2 rounded-l-full font-semibold hidden">Avis</button>
    <button id="write-review-btn" class="bg-purple-100 text-purple-700 px-6 py-2 rounded-l-full font-semibold">Rédiger un avis</button>
    <section id="write-review-section" class="p-6 hidden">
      <h3 class="font-semibold text-lg">Laisser un avis</h3>
      <form id="feedback-form" class="space-y-4 mt-4">
        <div>
          <label for="rating" class="block text-gray-700">Votre note</label>
          <input type="number" id="rating" name="rating" min="1" max="5" required class="w-full p-2 border border-gray-300 rounded" />
        </div>
        <div>
          <label for="description" class="block text-gray-700">Votre description</label>
          <textarea id="description" name="description" rows="4" required class="w-full p-2 border border-gray-300 rounded"></textarea>
        </div>
        <div>
          <button type="submit" class="bg-blue-500 text-white px-6 py-2 rounded-full">Soumettre l'avis</button>
        </div>
      </form>
    </section>
    
    {feedbacks.length > 0 ? (
      feedbacks.map((feedback: any) => (
        <div class="bg-white p-4 rounded shadow">
          <div class="flex justify-between items-center">
            <h2 class="font-bold text-lg">{feedback.rating} ★</h2>
            <span class="text-sm text-gray-500 italic">par {feedback.username}</span>
            <span class="text-sm text-gray-500 italic">le {feedback.date_fb}</span>
          </div>
          <p class="text-sm text-gray-600 mt-2">{feedback.description}</p>
        </div>
      ))
    ) : (
      <p class="text-gray-600">Aucun avis pour ce jeu.</p>
    )}
  </section>
  
  

  <section id="description-section" class="p-6 hidden">
    <div class="bg-white p-4 rounded shadow">
      <h2 class="font-bold text-lg">Description du jeu</h2>
      <p class="text-sm text-gray-600 mt-2">{game.description}</p>
    </div>
  </section>

  <script is:inline>
    async function isUserAuthenticated() {
      const res = await fetch(`https://rentagame-production-81ca.up.railway.app/api/profile`, { method: 'GET', credentials: 'include' });
      if (!res.ok) {
        console.error('Erreur lors de la vérification de la connexion');
        return false;
      }
      const data = await res.json();
      return data.loggedIn;
    }
  
    const avisBtn = document.getElementById('avis-btn');
    const descriptionBtn = document.getElementById('description-btn');
    const avisSection = document.getElementById('avis-section');
    const descriptionSection = document.getElementById('description-section');
    
    const writeReviewBtn = document.getElementById('write-review-btn');
    const writeReviewSection = document.getElementById('write-review-section');
    const feedbackForm = document.getElementById('feedback-form');
    
    // Gérer les boutons "Avis" et "Description"
    avisBtn.addEventListener('click', () => {
      avisSection.classList.remove('hidden');
      descriptionSection.classList.add('hidden');
  
      avisBtn.classList.add('bg-purple-100', 'text-purple-700');
      descriptionBtn.classList.remove('bg-purple-100', 'text-purple-700');
      descriptionBtn.classList.add('bg-white');
    });
  
    descriptionBtn.addEventListener('click', () => {
      descriptionSection.classList.remove('hidden');
      avisSection.classList.add('hidden');
  
      descriptionBtn.classList.add('bg-purple-100', 'text-purple-700');
      avisBtn.classList.remove('bg-purple-100', 'text-purple-700');
      avisBtn.classList.add('bg-white');
    });

  
    // Affichage du formulaire d'avis lorsque l'utilisateur clique sur le bouton
    window.addEventListener('load', async () => {
      const isAuthenticated = await isUserAuthenticated();
      if (isAuthenticated) {
        // Afficher le bouton "Rédiger un avis" si l'utilisateur est connecté
        writeReviewBtn.classList.remove('hidden');
      } else {
        // Cacher le bouton "Rédiger un avis" et afficher le message si l'utilisateur n'est pas connecté
        writeReviewBtn.classList.add('hidden');
        avisSection.innerHTML = "Vous devez être connecté pour rédiger un avis";  // Modifier le texte du bouton
        avisSection.classList.add('text-red-500');  // Ajouter une classe pour colorer le texte en rouge
      }
    });
    writeReviewBtn.addEventListener('click', async () => {
      const isAuthenticated = await isUserAuthenticated();
      
      if (isAuthenticated) {
        // Afficher le formulaire
        writeReviewSection.classList.remove('hidden');
        // Cache le bouton "Rédiger un avis"
        writeReviewBtn.classList.add('hidden');
      } else {
        // Si l'utilisateur n'est pas connecté, avertir et rediriger vers la page de connexion
        alert('Vous devez être connecté pour laisser un avis.');
        window.location.href = '/login'; // Redirige vers la page de connexion
      }
    });

  
    // Gestion de la soumission du formulaire d'avis
    feedbackForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      const rating = document.getElementById('rating').value;
      const description = document.getElementById('description').value;
      const gameContainer = document.getElementById('game-container');
      const gameId = gameContainer.dataset.id;
      const response = await fetch(`https://rentagame-production-81ca.up.railway.app/api/addfeedback`, {
        method: 'POST', 
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          gameId,
          rating,
          description,
        }),
        credentials: 'include', // Inclure les cookies pour l'authentification
      });
  
      if (response.ok) {
        alert('Avis soumis avec succès!');
        location.reload();
      } else {
        const data = await response.json(); 
        alert(data.message || "Erreur inconnue");
      }
    });
  </script>
  
</Layout>
