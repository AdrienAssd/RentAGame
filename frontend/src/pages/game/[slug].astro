---
import Layout from '../../layouts/Layout.astro';

export async function getStaticPaths() {
  // Va chercher tous les jeux pour générer les routes
  const response = await fetch('http://localhost:3001/api/allgames', {
    credentials: 'include',
  });
  const games = await response.json();

  return games.map((game: any) => ({
    params: { slug: game.slug },
  }));
}

const { slug } = Astro.params;

// Maintenant on cherche le jeu précis
const response = await fetch('http://localhost:3001/api/allgames', {
  credentials: 'include',
});
const games = await response.json();

const game = games.find((g: any) => g.slug === slug);

if (!game) {
  throw new Error('Jeu non trouvé');
}

// Récupération des catégories
// Filtrer les catégories qui correspondent au jeu
let gameCategories = Array.isArray(game.boardgamecategory)
  ? game.boardgamecategory
  : JSON.parse(game.boardgamecategory.replace(/'/g, '"'));

---

<Layout>
  <header class="flex justify-between items-center p-4 shadow bg-white">
    <div class="flex items-center gap-2">
      <img src="/images/LogoRentAGame.png" alt="Logo" class="h-10">
      <h1 class="text-xl font-bold">{game.title}</h1>
    </div>
    <nav class="space-x-4">
      <a href="/" class="text-gray-600 hover:text-black">Liste des jeux</a>
      <a href="/apropos" class="text-gray-600 hover:text-black">À propos</a>
      <a href="/contact" class="text-gray-600 hover:text-black">Contact</a>
      <a href="/login" class="bg-black text-white px-4 py-2 rounded hover:bg-gray-800 hidden" id="login-btn">Connexion</a>
    </nav>
  </header>

  <section class="relative bg-white p-4 shadow-md">
    <img src={game.image} alt={`${game.title} Banner`} class="rounded-lg w-full h-64 object-cover" />
    <div class="absolute bottom-6 left-6 text-white">
      <h1 class="text-4xl font-bold">{game.title}</h1>
      <div class="mt-4 space-x-2">
        <button class="bg-white text-gray-800 px-4 py-2 rounded font-semibold shadow">Ajouter à ma liste de souhaits</button>
        <button class="bg-white text-gray-800 px-4 py-2 rounded font-semibold shadow">Disponible à l'emprunt</button>
      </div>
    </div>
  </section>

  <section class="categories p-6">
    <h3 class="font-semibold text-lg">Catégories :</h3>
    <ul class="flex flex-wrap gap-2 mt-2">
      {gameCategories.length > 0 ? (
        gameCategories.map((category: any) => (
          <li class="bg-gray-200 text-gray-800 px-4 py-1 rounded-full text-xs">{category}</li>
        ))
      ) : (
        <li class="text-gray-600 text-xs">Aucune catégorie disponible pour ce jeu.</li>
      )}
    </ul>
  </section>
  <div class="flex justify-center mt-6">
    <button id="avis-btn" class="bg-purple-100 text-purple-700 px-6 py-2 rounded-l-full font-semibold">Avis</button>
    <button id="description-btn" class="bg-white px-6 py-2 rounded-r-full border">Description</button>
  </div>

  <!-- Conteneurs pour Avis et Description -->
   
  <section id="avis-section" class="p-6 space-y-4">
    <p class="text-gray-600">Aucun avis pour ce jeu.</p>
  </section>
  

  <section id="description-section" class="p-6 hidden">
    <div class="bg-white p-4 rounded shadow">
      <h2 class="font-bold text-lg">Description du jeu</h2>
      <p class="text-sm text-gray-600 mt-2">{game.description}</p>
    </div>
  </section>

  <script is:inline>
    const avisBtn = document.getElementById('avis-btn');
    const descriptionBtn = document.getElementById('description-btn');
    const avisSection = document.getElementById('avis-section');
    const descriptionSection = document.getElementById('description-section');
  
    avisBtn.addEventListener('click', () => {
      avisSection.classList.remove('hidden');
      descriptionSection.classList.add('hidden');
  
      avisBtn.classList.add('bg-purple-100', 'text-purple-700');
      descriptionBtn.classList.remove('bg-purple-100', 'text-purple-700');
      descriptionBtn.classList.add('bg-white');
    });
  
    descriptionBtn.addEventListener('click', () => {
      descriptionSection.classList.remove('hidden');
      avisSection.classList.add('hidden');
  
      descriptionBtn.classList.add('bg-purple-100', 'text-purple-700');
      avisBtn.classList.remove('bg-purple-100', 'text-purple-700');
      avisBtn.classList.add('bg-white');
    });
    const form = document.getElementById('feedback-form');
    if (form) {
      form.addEventListener('submit', async (e) => {
        e.preventDefault();

        const rating = parseInt(document.getElementById('rating').value);
        const description = document.getElementById('description').value;


        const res = await fetch('/api/feedback', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            gameId: game.ID,
            rating,
            description,
          }),
        });

        if (res.ok) {
          alert("Avis ajouté !");
          location.reload();
        } else {
          alert("Erreur lors de l’ajout de l’avis.");
        }
      });
    }

  </script>
</Layout>
